===== Year: 2006 =====
1. 求矩阵的转置。

2. 写一个程序，判断C语言中的变量命名是否合法。

3. 编写一程序，将中缀表达式转化为后缀表达式（含括号情况）。从expr.in文件中读取输入，将结果输出到expr.out文件中。

输入示例：
a-b*(c+d)
输出示例：
abcd+*-

4. 给定两个数m和n，实现如下功能：如m=3，n=4时，输出

1 2 3
1 2 4
1 3 4
2 3 4

5. 给定一无向图的矩阵存储，求其最大连通分量。图的信息存储在文件graph.in中，文件的第一行给无向图的顶点数量n和边数k，顶点序号从0到n-1，
接下来分别给出k条边的两个顶点号。输出无向图中的最大连通分量的所有顶点号，输出到文件graph.out中。

输入示例:
10 6
0 1
0 2
4 5
4 6
5 7
8 9

输出示例:
4 5 7 6

6. 求连续子数组的最大和，比如[-2,1,-3,4,-1,2,1,-5,4]中的连续子数组[4,-1,2,1]的和最大，为6。数组中的数字保存在文件number.in中，
求出结果输出到文件number.out中。

输入示例:
-2 1 -3 4 -1 2 1 -5 4

输出示例:
6

===== Year: 2007 =====
1. 编写程序，判断给定数字是否是回文数，如输入：123，输出：Y。输入：234，输出:N。

2. 队列的循环报数问题：设有n个人站成一排，从左往右的编号分别为1~n，现在从左往右报数“1,2,1,2....”，数到“1”的人出列，
数到“2”的人立即站到队伍的最右端。报数过程反复进行，直到n个人都出列为止。要求给出它们的出列顺序。

n从键盘输入，出列顺序输出到控制台。

输入示例：
10
输出示例：
1 3 5 7 9 2 6 10 8 4

3. 无向图的最小生成树：输入在文件3.in中给出，描述了图的形状。首先给出图中结点的总数n，结点编号从0到n-1，然后接下来每一行给出边的信息，
每行包含三个数字，分别是两个顶点的编号以及边长。要求出无向图对应的最小生成树，将结果输出到文件3.out中。

输入示例:
9
7      6    1 
8      2    2 
6      5    2 
0      1    4 
2      5    4 
8      6    6 
2      3    7 
7      8    7 
0      7    8 
1      2    8 
3      4    9 
5      4    10
1      7    11
3      5    14

输出示例:
7 -- 6 : 1
6 -- 5 : 2
8 -- 2 : 2
2 -- 5 : 4
0 -- 1 : 4
2 -- 3 : 7
1 -- 2 : 8
3 -- 4 : 9

4. 中序后序得前序：输入在文件4.in中给出，首先给出二叉树中的顶点个数n，然后在接下来两行给出中序和后序序列，要求根据中序和后序序列构建二叉树，
并且将二叉树的前序遍历序列输出到文件4.out中。

输入示例:
5
D B A C E
D B E C A

输出示例:
D B A C E

===== Year: 2008 =====
1. 一个十进制正整数转换成二进制有多少个1

2. 约瑟夫环（约瑟夫问题）是一个数学的应用问题：已知 n 个人（以编号1，2，3…n分别表示）围坐在一张圆桌周围。从编号为 k 的人开始报数，
数到 m 的那个人出圈；他的下一个人又从 1 开始报数，数到 m 的那个人又出圈；依此规律重复下去，直到剩余最后一个胜利者。

例如：有10个人围成一圈进行此游戏，每个人编号为 1-10 。若规定数到 3 的人出圈。则游戏过程如下。

（1）开始报数，第一个数到 3 的人为 3 号，3 号出圈。
  1， 2， 【3】， 4， 5， 6， 7， 8， 9， 10。
（2）从4号重新从1开始计数，则接下来数到3的人为6号，6号出圈。
  1， 2， 【3】， 4， 5， 【6】， 7， 8， 9， 10。
（3）从7号重新从1开始计数，则接下来数到3的人为9号，9号出圈。
  1， 2， 【3】， 4， 5， 【6】， 7， 8， 【9】， 10。
（4）从10号重新从1开始计数，由于10个人称环形结构，则接下来数到3的人为2号，2号出圈。
  1， 【2】， 【3】， 4， 5， 【6】， 7， 8， 【9】， 10。
（5）从4号重新从1开始计数，则接下来数到3的人为7号，7号出圈。
  1， 【2】， 【3】， 4， 5， 【6】， 【7】， 8， 【9】， 10。
（6）从8号重新从1开始计数，则接下来数到3的人为1号，1号出圈。
  【1】， 【2】， 【3】， 4， 5， 【6】， 【7】， 8， 【9】， 10。
（7）从4号重新从1开始计数，则接下来数到3的人为8号，8号出圈。
  【1】， 【2】， 【3】， 4， 5， 【6】， 【7】， 【8】， 【9】， 10。
（8）从10号重新从1开始计数，则接下来数到3的人为5号，5号出圈。
  【1】， 【2】， 【3】， 4， 【5】， 【6】， 【7】， 【8】， 【9】， 10。
（9）从10号重新从1开始计数，则接下来数到3的人为10号，10号出圈。
  【1】， 【2】， 【3】， 4， 【5】， 【6】， 【7】， 【8】， 【9】， 【10】。
（10）最终剩余 4 号，4 号为胜利者。

3. 求矩阵的转置。

4. 字符串问题。从文件4.in中读入几行英文句子。输出每个单词出现的个数，并且按照字典索引输出到控制台。

输入示例：
I am
a student from china
china
am student

输出示例：
I 1
a 1
am 2
china 2
from 1
student 2

===== Year: 2009 =====
1. 输入0~65535之间的十进制数。进行如下处理：比如输入4，转化为16位二进制数0000 0000 0000 0100，4个一组，相异或，变为0001，
然后把0001转化为十进制的1然后输出。

输入：4
输出：1

2. 处理：将n个数由小到大排序，如果n是奇数，输出正中间的数；如果n是偶数，输出正中间的两个数。

3. 读入文件tree.in中的二叉树先序序列，0表示叶子。中序输出深度≤depth/2的结点，其中depth是你所建立的树的深度。

输入示例：
ABC00DE0000
输出示例：
B A

===== Year: 2010 =====
1. input.txt文件里面有一段文章，由字符串和一些特殊字符构成。先把 input 文件中的内容读入缓冲区，在从缓冲区中取字符，进行如下操作:

    1. 如果是字符，空格，输出
    2. 如果是!，删除前面一个字符
    3. 如果是*，删除前面 1 行字符串
    4. 如果是>，讲前面一个单词的首字符，进行大小写转化
    5. 如果是数字，则不作任何操作
输入示例:
this is some > text!
one plus one eqs 2
this line should be deleted
prev line sh*ould be deleted

输出示例:
this is Some  tex
one plus one eqs 
prev line should be deleted

2. 将两个矩阵相乘并输出。

3. 已知二叉排序树用二叉链表存储，结点的关键字为正整数。从键盘输入结点的关键字（以0表示结束）建立一棵二叉排序树，并输出其后序遍历序列。

输入示例：
40 20 60 70 0

输出示例：
20 70 60 40

===== Year: 2011 =====
1. 给两个十进制数，先异或，然后输出其二进制形式。

2. 一共有十二个球，其颜色有红、黄、黑三种，红黄黑分别有 x，y，k 个，现在从其中取出八个球，共有多少种取法，输出到文件中？
（x，y，k 从键盘输入，同种颜色的球不区分）

输出格式;
1.  红球， 黄球， 黑球;
2.  红球， 黄球， 黑球;
3.
....

3. 在文件3.txt中查看是否有模式 abcde。若有，输出找到abc*d?e匹配；若无，则输出没有找到abc*d?e匹配，将结果输出到控制台。

4. 从文件4.txt中读入一个二叉树，然后后序遍历该二叉树，将结果输出到文件4.out。

输入格式：
4 // 表示结点个数
1 2 4 // 当前结点编号 左孩子编号 右孩子编号
2 0 3
3 0 0
4 0 0

输出格式：
3 2 4 1

===== Year: 2012 =====
1. 字符串处理：从string.in文件里读入两个字符串，字符串除了数字还可能包括'-'、'E'、'e'、'.'，相加之后输出到文件string.out中，
如果是浮点型，要求用科学计数法表示（最多保留10个有效数字）。

输入示例:                       
34.56                                
2.45e2    

输出示例: 
2.7956e2 

2. 最大公约数：从number.in文件中读入n个数，求出这n个数的最小值、最大值以及它们两的最大公约数，输出到文件number.out中。
number.in 中第一行为n，接下来为n个大于零的整数。

输入示例:
3
4 8 6

输出示例:
4 8 4

3. 任务调度：从task.in文件中读入任务调度序列，输出n个任务适合的一种调度方式到task.out中。每行第一个表示前序任务，
括号中的任务为后序任务，只有在前序任务完成的情况下，后序任务才能开始。若后序为NULL则表示无后序任务。

输入示例:
Task0(Task1,Task2)
Task1(Task3)
Task2(NULL)
Task3(NULL)

输出示例:
Task0 Task1 Task3 Task2

4. 火车票订购：火车经过X站，火车的最大载客人数为m，有n个订票请求，请求订购从a站到b站的k张票，若能满足订购要求则输出1，否则输出0。
数据从ticket.in中输入，第一行有两个数字，分别是n，m。接下来有n行，每行三个数分别是a、b、k。结果输出到文件ticket.out中。

输入示例:
5 10
4 10 9
8 12 2
8 12 1
14 20 8
30 300 15

输出示例:
1
0
1
1
0

5. 最短路径：有n个城市和m条道路（n < 1000, m < 10000），每条道路有不同的长度，请找到从起点s到终点t的最短距离，
并且输出经过的城市的序号，如果有多条，输出字典序最小的那条；若从s到t没有路径，则输出“can't arrive”。
从文件road.in中读入数据，第一行有四个数，分别为n、m、s、t。接下来有m行，每行三个数，分别为两个城市的序号和相互之间的距离，
将结果输出结果到文件road.out中。

输入示例:
3 3 1 3
1 3 3
1 2 1
2 3 1

输出示例:
2
1 2 3

===== Year: 2013 =====
1. 在1.in中有几个正整数，把这几个正整数中的最大值输出到1.out.

2. 在2.in中有几个正整数，把这几个正整数的和输出到2.out.

3. 在3.in中有一个正整数，把这个正整数的二进制形式输出到3.out.

4. 在4.in中有一个正整数，把这个正整数分解成两个质数的和的方案数输出到4.out.

输入示例:
10
输出示例:
2 （5+5=10  3+7=10   7+3和3+7是一个方案）

5. n皇后问题：n×n格的棋盘上放置彼此不受攻击的n个皇后。按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。
n后问题等价于在n×n的棋盘上放置n个皇后，任何2个皇后不妨在同一行或同一列或同一斜线上。在文件5.in中给定棋盘的大小n，在文件5.out中输出放置方法的个数。

输入示例:
4
输出示例:
2

6. 字符串匹配问题：在文件6.in中有两个字符串，在文件6.out输出第二个字符串在第一个字符串中的起始和终止位置，如果没有则输出0。

输入示例:
abcdefgdrefege
cdef
输出示例:
3 6

7. 哈弗曼树问题：在文件7.in中有几个数，和为1，进行哈弗曼编码，并把编码结果输出到7.out中。

输入示例:
0.1 0.15 0.2 0.25 0.3
输出示例:
000
001
01
10
11

===== Year: 2014 =====
1. 从标准输入读取一个字符串，然后统计字符串中有多少个字母、数字、空格和其他字符。

2. 给你一个十进制数，输出相应的八进制数。

3. 给你一个数，要求你求出这个数与其反序数的和相加多少次才可以得到回文数。

给你 1568 
 
1568+8651=10219，不是回文字，继续， 
 
10219+91201=101410，不是回文字，继续， 
 
101410+014101=115511，是回文字，结束，输出 3； 

4. 读取一个文件graph.in，做无向图的广度遍历输出，文件的第一行是图的结点个数，后面是边的信息，0 0表示结束，结点的编号从1开始，将广度遍历序列输出到控制台。

输入示例：
4
1 2
1 4
2 3
2 4
3 4
0 0

输出示例：
1 2 4 3

===== Year: 2015 =====
1. 输出 abcdefghij 任取 5 个字符所有组合，不能有重复，输出到控制台

格式：
第 1 种组合：a,b,c,d,e
第 n 种组合：....
......

2. 设计一个模拟测试系统。输出 0-50 以内 2 个随机数的加或减。
从键盘输入答案，每题有2次机会，第一次答对得10分，第二次答对得5分，总共10题，最终输出总得分。

3. 输出树的层次遍历的奇数层的所有结点。从input_3.txt输入，输出到output_3.txt。

输入格式：
A B C
B E
C F G

树
    A
   / \
  B   C
 /   / \
E   F   G

输出格式：
第 1 层结点：A
第 3 层结点：E,F,G

4. 从文件input_4.txt输入一个图，要求输出从1经过k到n的最短路径，可以有环，输出到文件output_4.txt。

输入：
n=5
k=3
1 2 10 5 30
2 3 20
3 4 60 5 10
4 5 20
5
输出：
1 2 3 5

===== Year: 2016 =====
1. 设计程序，讲用户输入的十进制整数转换为十六进制数，并在屏幕上输出。

2. 编程实现一个简单的我微信红包分配算法。满足以下要求即可：

    1. 键盘输入红包金额X元，以及红包个数N。X是正数，例如10.88，表示10.88元。N是正整数。
    2. 每个红包的金额至少是一分钱。如果总金额X无法满足这一条件，则提示重新输入。
    3. 在红包金额固定的条件下，单个红包的金额随机生成。
    4. 在屏幕上输出红包分配结果。

输入示例
100 5
输出示例
10.1  20  30.2  9.9  29.8

3. 求多项式的根2x^11 - 3x^8 - 5x^3 - 1 = 0，根的精度为0.00000001

4. 给定一个二叉树的前序遍历和后序遍历，给出一种可能的中序遍历结果。 输入从文件4.in中给定。其中第一行是二叉树结点的个数，第二行是二叉树的前序遍历序列，第三行是后序遍历序列。二叉树种的结点名称以大写字母表示，最多26个结点。 将结果输出到文件4.out，输出一种可能的中序遍历结果。

输入示例
5
A B D C E
D B E C A
输出示例
D B A E C



===== Year: 2017 =====
1. 文本文件input1.txt中含有一行字符串（字符串长度不大于1000），由若干个英文单词构成，单词之间以一个或多个空格分割，
请将该字符串中单词之间多余的空格删除，即单词之间只保留一个空格，字符串首尾的空格也删除，并将所有单词的首字母改成大写之后输出到屏幕。

输入
i  am  very nervous today      since i   will attend the C   programming
输出
I Am Very Nervous Today Since I Will Attend The C Programming

2. 一个数如果等于它所有的因子（除了自己本身）之和，比如6=3+2+1，则称其为“完数”；若因子之和大于该数，则称其为“盈数”。
在屏幕上输出2到1000之间的所有“盈书”和“完数”。

3. 文本文件input3.txt中有一个有序的正整数序列，以空格作为间隔符。计算该序列中包含的最长等差子序列的长度，并输入，例如

输入：1 2 3 5 7 8 14 20 26
最长等差子序列：2 8 14 20 26
输出：5

4. 在文本文件input4.txt中给定无向连通图G，判断图G是否存在这样一个顶点V，当V被删除时，该图的其他部分不再连通。如果存在，只需要找出一个这样的顶点，并输出顶点的编号， 如果不存在，则输出"not exist"。

输入：
5   // 表示顶点个数
1 5 // 节点1和5之间有一条边
2 3
2 4
3 5
4 5
输入数据对应的图如下所示：
       4
      / \
1 -- 5   2
      \ /
       3
输出：
5



===== Year: 2018 =====
1. 2000年1月1日是星期六，现在给你任意一个天数n，代表其距离2000年1月1日有n天，让你求该天是几年几月几日，星期几。
比如n=2，输出“2000-1-3 Monday”。（记得注意闰年有366天，而且二月有29天）

2. 文件input2.txt中存储着机房中的m条签到记录，其中每条签到记录由学生的学号、签到时间、签退时间组成。
若签退时间小于签到时间，则说明跨天。一人可以多次签到，但多次签到的时间没有重合。

文件input2.txt中第一行是m，接下来是m行签到记录，要求给出在机房中停留时间最长的学生学号，并输出到标准输出。

输入示例:
3
SA0010001 13:00 16:39
SA0010101 07:22 22:01
SA0010111 12:00 11:56
输出示例:
SA0010111

3. 给定n种面值的邮票，问用这n种面值的邮票能不能凑够总面值m，如果能的话输出所需要的最少邮票个数，不能的话输出0。

邮票的信息在文件input3.txt中给出，第一行给出m和n的值，第二行给出n种邮票的面值，将结果输出到标准输出。

输入示例:
10 3
1 2 4
输出示例:
3

4. 求两个字符串的最长公共子序列的长度，字符串在文件input4.txt中给出，将结果输出到标准输出。

输入示例:
abcfac abcdfd
programming contest
abc mmp
输出示例:
4
2
0


===== Year: 2019 =====
1. 一个合法的身份证号码前17个数字加1位校验码组成。校验码的计算规则如下：

首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值Z；最后按照以下关系对应Z值与校验码M的值：

Z：0 1 2 3 4 5 6 7 8 9 10
M：1 0 X 9 8 7 6 5 4 3 2
现给定一个身份证号，从标准输入读取，判断该身份证是否合理，如果合理输出"YES"，如果不合理输出"NO"。(该示例感觉不正确)

输入示例:
37070419881216001X
输出示例:
YES

2. 判断给定的数字是否可以拆分为两个2的幂的和的形式，如果可以输出拆分方案，不能输出"NO"。

输入示例:
5
输出示例:
5 = 2^0 + 2^2

输入示例:
7
输出示例:
NO

3. 给出前缀式，只有加减乘除，求结果。前缀式从文件pre.in中读取，将结果输出到标准输出中，题目保证输入的前缀式有效。

输入示例:
- + 1 * + 2 3 4 5
输出示例:
16

4. 求集合的所有划分，集合从文件set.in中读取，结果输出到标准输出中。

输入示例:
a b c
输出示例:
{{a,b,c}}
{{a,b},{c}}
{{a,c},{b}}
{{a},{b,c}}
{{a},{b},{c}}
注：输入 a b c 代表集合{a,b,c}

5. 给出一个二叉排序树的层次遍历，求从它的一个叶子结点到另一个叶子结点的路径，要求路径上经过结点的数值之和最大。二叉树的层次遍历序列从文件tree.in中读取，结点数值大于0，将结果输出到标准输出中。

输入示例:
25 15 40 5 20 30 50 10 35
输出示例:
165

===== Year: 2020 =====
1. 从标准输入读取两个正整数，求这两个数的最大公约数。

输入示例:
35 49
输出示例:
7

2. 求长度为n的无序数组中第k大的数。数组从文件array.in中读取，首先给出n和k，然后给出数组的n个元素。

输入示例:
10 7
6 2 20 99 37 100 33 28 78 44
输出示例:
44

3. 从文件number.in中读取若干个正整数，求出它们最大的组合数，输出到标准输出中。

输入示例:
123 456 78 782 789
输出示例:
78978782456123


===== Year: 2021 =====
1. 求n项自然指数的级数（从1到n），其中n从标准输入读取，将结果输出到标准输出，保留到小数点后4位。

2. 从标准输入读取数字a和b（64位），求a和b之间的海明距离（二进制表示中不同位的个数）。

3. 从标准输入中读取四个正整数，判断只通过加法和乘法是否能够得到24点？如果可以话在标准输出中输出"YES"，否则输出"NO"。

输入示例:
2 2 1 5
输出示例:
NO // (2+2) * (1+5) == 24 可以满足，但不允许使用括号

输入示例:
3 4 1 12
输出示例:
YES // 3*4 + 1*12

4. 从标准输入读取一个十进制正整数，将该整数转化为七进制输出到标准输出。

===== Year: 2022 =====
1. 将10进制正整数转换为7进制的正整数。输入为给定的一个10进制数K(K<1000),计算它的7进制表达形式。如K=15时，输出为21。

2. 两有序数组中寻找中位数:假设有两个数组A和B，分别包含有m和n个整致，数组元素均按照递增顺序排列，请设计有效的算法确定两个数组中所有元素的中位数
(“有效”指让法的时间复杂度尽可能的低，“中位数”指集合中大小居中的那个数)，并给出相应的时间复杂度。
例如，算法输入数组A={1,2,3}，B={3,5}，则算法输出为3({1,2,3,3,5}的中位数);
若算法输入A={1,2,3}，B={2,4,5}，则算法输出为2和3({1,2,2,3,4,5}的中位数)。

3. 写代码返回一个英文句子中最长单词的字符个数，

4. 给定两个字符用str1和str2，请输出将str1转为str2的最少操作数，要求时间复杂度为O(log(MN))，其中M、N分别是两个字符串的长度。
可以对字符围进行3种操作:插入一个字符、删除一个字符、改一个字符。
字符串长度满足1<=n<=1000，字符串中只出现小写英文字母。

示例输入: nowcoder,new

示例输出: 6

示例说明:
"nowcoder"=>"newcoder"(将'o'替换为'e')，修改操作1次
"nowcoder"=>"new"(删除"coder”)，删除操作5次


===== Year: 2023 =====
1. 判断一个ip地址是否合法

2. 数列求和

3. 二叉树，求重链和

4. 集合的划分（以前考过的原题：应该是指2019年子集划分问题）

5. 图，子图，完全图

